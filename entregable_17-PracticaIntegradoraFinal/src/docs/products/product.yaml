paths:
  /api/products/:
    get:
      summary: Get all products
      tags:
        - Product
      responses:
        '200':
          description: Successfully obtained products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error

    post:
      summary: Create a product
      tags:
        - Product
      parameters:
      requestBody:
        required: True
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/requestBodies/Products'

      responses:
        '200':
          description: Successfully created product
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized user
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/unauthorizedUser'
        '403':
          description: The user does not have the necessary permissions
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/noAccess'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/notFoundProduct'
        '500':
          description: Internal Server Error

  /api/products/{productID}:
    get:
      summary: Get product by Id
      tags:
        - Product
      parameters:
        - name: productID
          in: path
          required: true
          schema:
            $type: string
          description: Product ID autogenerated by the database
      responses:
        '200':
          description: Successfully obtained product
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/notFoundProduct'
        '500':
          description: Internal Server Error

    put:
      summary: Edit a product using their ID
      tags:
        - Product
      parameters:
      - name: productID
        in: path
        required: true
        schema:
          $type: string
        description: Product ID autogenerated by the database
      requestBody:
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/Products'
      responses:
        '200':
          description: Successfully updated product
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized user
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/unauthorizedUser'
        '403':
          description: The user does not have the necessary permissions
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/noAccess'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/notFoundProduct'
        '500':
          description: Internal Server Error

    delete:
      summary: Delete a product using their ID
      tags:
        - Product
      parameters:
        - name: productID
          in: path
          required: true
          schema:
            $type: string
          description: Product ID autogenerated by the database
      responses:
        '200':
          description: Product successfully removed
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized user
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/unauthorizedUser'
        '403':
          description: The user does not have the necessary permissions
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/noAccess'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/notFoundProduct'
        '500':
          description: Internal Server Error

components:
  schemas:
    unauthorizedUser:
      type: object
      properties:
        message:
          type: string
          description: Error message
      example:
        message: Unauthorized user

    noAccess:
      type: object
      properties:
        message:
          type: string
          description: Error message
      example:
        message: The user does not have the necessary permissions

    notFoundProduct:
      type: object
      properties:
        message:
          type: string
          description: Error message
      example:
        message: Product not found

    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message
      example:
        message: Error message

    Product:
      type: object
      properties:
        _id:
          type: ObjectId
          description: MongoDB autogenerated id
        title:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        price:
          type: number
          description: Product price
        thumbnail:
          type: array
          description: Access to product images
        code:
          type: string
          unique: true
          description: Product identification code
        stock:
          type: number
          description: Product stock
        status:
          type: boolean
          description: True or False
        category:
          type: string
          description: Category in which the product is located
      example:
        _id: ObjectId ("fb7hdsfh4hs47h4")
        title: Song of ice and fire
        description: book by george rr martin
        price: 10_000
        thumbnail: []
        code: agrt123456
        stock: 50
        status: true
        category: fantasy

  requestBodies:
    Products:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        code:
          type: string
          required: true
        price:
          type: number
          format: float
        stock:
          type: integer
          format: int64
      example:
        title: Harry Potter and the Prisoner of Azkaban
        description: Book written by J. K. Rowling
        price: 9000
        stock: 600
        code: abc123
        category: fantasy

